###
# ・heroku container registoryにpushするDockerイメージが動作するか
# を確認するだけのdocker-compose.yml
# 同階層にある本番様Dockerfileを参照する
# ・使用するときはこのdocker-compose.production.ymlをdocker-compose.ymlにコピーして確認用に使用する。
###

version: '3.8'

services:
  web_backend:
    build: .
    container_name: web_backend
    tty: true
    stdin_open: true
    ports:
      - 80:80
    volumes:
      # - ./docker/php/php.ini:/usr/local/etc/php/php.ini
      - ./docker/php/apache/000-default.production.conf:/etc/apache2/sites-enabled/000-default.conf
    environment:
      - APP_NAME=Laravel
      - APP_ENV=local
      - APP_KEY=base64:gzma6NgoUvRdPBhKvAw7SwemOH+neMNEpZENwv3ctqQ=
      - APP_DEBUG=true
      - APP_URL=http://localhost:8000
      - FRONTEND_URL=http://localhost:3000
      - LOG_CHANNEL=stack
      - LOG_DEPRECATIONS_CHANNEL=null
      - LOG_LEVEL=debug
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=strii_db
      - DB_USERNAME=trainer
      - DB_PASSWORD=trainer
      - BROADCAST_DRIVER=log
      - CACHE_DRIVER=file
      - FILESYSTEM_DISK=local
      - QUEUE_CONNECTION=sync
      - SESSION_DRIVER=file
      - SESSION_LIFETIME=10080
      - SESSION_SECURE_COOKIE=true\
      - MEMCACHED_HOST=127.0.0.1
      - REDIS_HOST=127.0.0.1
      - REDIS_PASSWORD=null
      - REDIS_PORT=6379
    depends_on:
      - db
  db:
    image: mysql:8.2
    container_name: db
    # restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: strii_db
      MYSQL_USER: trainer
      MYSQL_PASSWORD: trainer
      TZ: 'Asia/Tokyo'
    volumes:
      - ./docker/db/data:/var/lib/mysql
      - ./docker/db/my.cnf:/etc/mysql/conf.d/my.cnf

      # 本番環境のjawsdbにssl接続するためにマウント
      # ssl証明書はローカルで適宜下記の場所に配置すること
      - ./docker/ssl/jawsdb-ssl/:/etc/ssl/jawsdb-ssl/
    ports:
      - 3306:3306
